Informe:
Integrante : Nelson Gabriel Gonzalez
email: nelgonzalez88@gmail.com
legajo:39915

Introduccion:
Para resolver el problema fue necesario el uso de las siguientes clases:
*Buffer: que actua como una cola FIFO concurrente de capacidad de 2, dispone de un msj pop y  un msj add  con el que podemos administrar el ingreso y egreso de las unidades de trabajo. 
El metodo pop tiene dentro de su logica un wait, que si la cola esta vacia, se queda esperando el agreso de una unidad de trabajo para poder retornarla, una vez que dispone de una unidad de trabajo  para retornar hace un notifyAll con que el que avisa que ya retorno su unidad de trabajo . Asi mismo el metodo add tiene un wait  cuando la cola esta llena que realiza el mismo procedimiento pero en sentido inverso. Vale aclarar que que la cola es de tamaño 2 ya que la unidad de trabajo tiene un valor de inicio y un valor de final.
* ThreadPool: Esta clase es la encargada de instanciar a los  PowWorker, esta clase recibe como parametro la cantidad de PowWorker, la cadena que luego se concatenara con  cada valor del nonce, el buffer y la dificultad que es la cantidad de bytes en cero que debera tener el hash.  Dispone de un array de PowWorker que son inicializados en su constructor, estos comienzan su ejecucion mediante el metodo run donde mediante un for que recorre dicho array  llamando al metodo start de cada Pow. Tiene un metodo getArrayByteToHexa con el que puede mostrar en pantalla un array de bytes en hexa, este msj lo usamos para mostrar por pantalla el hash que cumple con la condicion. Tiene un metodo  pasarUnSegundo() que lo llamamos en el main cada vez que pasa un segundo, esto lo logramos con un cronometro dimplementado con la clase TimerTask. Dispone de un metodo  encontreNoce() el cual es llamado cuando algunos de los pow encuentra el nonce, este metodo avisa a todos los pow que el nonce ya fue encontrado para que el pow pueda parar su busqueda.

* PowWorker: Esta clase extiende de Thread   es la encargada de realizar la busqueda del nonce. Recibe en su parametro una cadena que luego sera concatenada con el nonce, un id que se lo asigna su Threadpool, un buffer, su ThreadPool y la difcultad de busqueda. Su metodo principal es run()que lo Hereda de su de super clase, en este metodo se realiza el proceso de busqueda, primero toma el inicio y el final del barrido de nonce que le corresponde del buffer, llama a su metodo buscar pasandole como parametro el inicio y el final del barrido. Dentro de este metodo se realiza un for de todos los nonce posibles. En cada iteriacion concatenenando la cadena, el valor de nonce, sacando el hash y verifica que cumpla la dificultad solicitada. Si encuentra un nonce que cumpla la dificultad le avisa a su ThreadPool. En el caso de no encontrarlo manda un mjs a pantalla que no fue posible la busqueda y se detiene.

*Main: Esta clase ademas de correr el programa, es el encargado de hacer el productor del buffer, generando las unidades de trabajo. Tambien cuenta con un Timer que es el encargado de contar los segundos que tardan en encontrar el nonce 
